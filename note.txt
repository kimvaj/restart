from django.core.mail import EmailMessage
import logging

logger = logging.getLogger(__name__)


class Util:
    @staticmethod
    def send_email(data):
        try:
            email = EmailMessage(
                subject=data["email_subject"],
                body=data["email_body"],from .tasks import send_email_task
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
import logging

from django.shortcuts import render
from rest_framework import generics, status
from .serializers import (
    SetNewPasswordSerializer,
    ResetPasswordEmailRequestSerializer,
    EmailSerializer,
)
from rest_framework.response import Response
from apps.accounts.models import User
from .utils import Util
from django.contrib.sites.shortcuts import get_current_site
from django.urls import reverse
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.utils.encoding import (
    smart_str,
    force_str,
    smart_bytes,
    DjangoUnicodeDecodeError,
)
from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
from django.http import HttpResponsePermanentRedirect

import os

logger = logging.getLogger(__name__)


class CustomRedirect(HttpResponsePermanentRedirect):
    allowed_schemes = [os.environ.get("APP_SCHEME"), "http", "https"]


class RequestPasswordResetEmail(generics.GenericAPIView):
    serializer_class = ResetPasswordEmailRequestSerializer

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)

        email = serializer.validated_data.get("email")
        redirect_url = request.data.get("redirect_url", "")

        if User.objects.filter(email=email).exists():
            user = User.objects.get(email=email)
            uidb64 = urlsafe_base64_encode(smart_bytes(user.id))
            token = PasswordResetTokenGenerator().make_token(user)
            current_site = get_current_site(request).domain
            relative_link = reverse(
                "password-reset-confirm",
                kwargs={"uidb64": uidb64, "token": token},
            )
            absurl = f"http://{current_site}{relative_link}"
            email_body = f"Hello, \n Use the link below to reset your password \n{absurl}?redirect_url={redirect_url}"
            data = {
                "email_body": email_body,
                "to_email": user.email,
                "email_subject": "Reset your password",
            }
            Util.send_email(data)
            return Response(
                {"success": "We have sent you a link to reset your password"},
                status=status.HTTP_200_OK,
            )
        else:
            return Response(
                {"error": "Email not registered"},
                status=status.HTTP_400_BAD_REQUEST,
            )


class CustomRedirect(HttpResponsePermanentRedirect):
    allowed_schemes = [os.environ.get("APP_SCHEME"), "http", "https"]


class PasswordTokenCheckAPI(generics.GenericAPIView):
    serializer_class = SetNewPasswordSerializer

    def get(self, request, uidb64, token):
        redirect_url = request.GET.get("redirect_url", "")
        try:
            uidb64_padded = uidb64 + "=" * (
                -len(uidb64) % 4
            )  # Add padding to uidb64 if needed
            id = smart_str(urlsafe_base64_decode(uidb64_padded))
            user = User.objects.get(id=id)

            if not PasswordResetTokenGenerator().check_token(user, token):
                if redirect_url:
                    return CustomRedirect(f"{redirect_url}?token_valid=False")
                return CustomRedirect(
                    f"{os.environ.get('FRONTEND_URL', '')}?token_valid=False"
                )

            if redirect_url:
                return CustomRedirect(
                    f"{redirect_url}?token_valid=True&message=Credentials Valid&uidb64={uidb64}&token={token}"
                )
            return CustomRedirect(
                f"{os.environ.get('FRONTEND_URL', '')}?token_valid=True"
            )

        except DjangoUnicodeDecodeError:
            if redirect_url:
                return CustomRedirect(f"{redirect_url}?token_valid=False")
            return CustomRedirect(
                f"{os.environ.get('FRONTEND_URL', '')}?token_valid=False"
            )
        except ValueError:
            return Response(
                {"error": "Invalid token or uidb64"},
                status=status.HTTP_400_BAD_REQUEST,
            )


class SetNewPasswordAPIView(generics.GenericAPIView):
    serializer_class = SetNewPasswordSerializer

    def patch(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        return Response(
            {"success": True, "message": "Password reset success"},
            status=status.HTTP_200_OK,
        )


class SetNewPasswordAPIView(generics.GenericAPIView):
    serializer_class = SetNewPasswordSerializer

    def patch(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        return Response(
            {"success": True, "message": "Password reset success"},
            status=status.HTTP_200_OK,
        )


class SendEmailView(APIView):
    def post(self, request, *args, **kwargs):
        serializer = EmailSerializer(data=request.data)
        if serializer.is_valid():
            # Assuming send_email_task is a celery task or similar
            send_email_task.delay(serializer.validated_data)
            return Response(
                {"message": "Email is being processed."},
                status=status.HTTP_202_ACCEPTED,
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

                to=[data["to_email"]],
            )
            email.send()
            logger.info(f"Email sent to {data['to_email']}")
        except Exception as e:
            logger.error(
                f"Failed to send email to {data['to_email']}: {str(e)}"
            )


from rest_framework import serializers
from apps.accounts.models import User
from rest_framework import serializers
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.utils.encoding import (
    force_str,
    smart_bytes,
    DjangoUnicodeDecodeError,
)
from django.utils.http import urlsafe_base64_decode
from rest_framework.exceptions import AuthenticationFailed


class ResetPasswordEmailRequestSerializer(serializers.Serializer):
    email = serializers.EmailField(min_length=2)
    redirect_url = serializers.CharField(max_length=500, required=False)

    class Meta:
        fields = ["email"]


class SetNewPasswordSerializer(serializers.Serializer):
    password = serializers.CharField(
        min_length=6, max_length=68, write_only=True
    )
    token = serializers.CharField(min_length=1, write_only=True)
    uidb64 = serializers.CharField(min_length=1, write_only=True)

    class Meta:
        fields = ["password", "token", "uidb64"]

    def validate(self, attrs):
        try:
            password = attrs.get("password")
            token = attrs.get("token")
            uidb64 = attrs.get("uidb64")

            id = force_str(urlsafe_base64_decode(uidb64))
            user = User.objects.get(id=id)
            if not PasswordResetTokenGenerator().check_token(user, token):
                raise AuthenticationFailed("The reset link is invalid", 401)

            user.set_password(password)
            user.save()

            return user
        except Exception:
            raise AuthenticationFailed("The reset link is invalid", 401)
        return super().validate(attrs)


class EmailSerializer(serializers.Serializer):
    recipient = serializers.EmailField()
    subject = serializers.CharField(max_length=255)
    message = serializers.CharField()


from django.urls import path
from rest_framework.routers import DefaultRouter
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
    TokenVerifyView,
)
from apps.emailapp.views import (
    SendEmailView,
    PasswordTokenCheckAPI,
    RequestPasswordResetEmail,
    SetNewPasswordAPIView,
)
from apps.accounts.views import UserTokenObtainPairView
from apps.accounts.views import (
    UserViewSet,
    UserRegisterView,
    UserMeView,
    GroupViewSet,
    PermissionViewSet,
)


from .views import APIRootView


app_name = "api"


# Create a custom router by inheriting from DefaultRouter
# class CustomRouter(DefaultRouter):
#     def get_api_root_view(self, api_urls=None):
#         root_view = super().get_api_root_view(api_urls)
#         root_view.cls.__doc__ = "Your custom API root description here."
#         return root_view


# router = CustomRouter()
router = DefaultRouter()
router.register(r"users", UserViewSet)
router.register(r"groups", GroupViewSet)
router.register(r"permissions", PermissionViewSet)

urlpatterns = [
    path("", APIRootView.as_view(), name="api-root-view"),
    # path('auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path(
        "auth/signin/", UserTokenObtainPairView.as_view(), name="auth-signin"
    ),
    path("auth/register/", UserRegisterView.as_view(), name="auth-register"),
    path(
        "auth/token/refresh/", TokenRefreshView.as_view(), name="token_refresh"
    ),
    # path('auth/token/verify/', TokenVerifyView.as_view(), name='token_verify'),
    path("send-email/", SendEmailView.as_view(), name="send-email"),
    path(
        "request-reset-email/",
        RequestPasswordResetEmail.as_view(),
        name="request-reset-email",
    ),
    path(
        "password-reset/<uidb64>/<token>/",
        PasswordTokenCheckAPI.as_view(),
        name="password-reset-confirm",
    ),
    path(
        "password-reset-complete/",
        SetNewPasswordAPIView.as_view(),
        name="password-reset-complete",
    ),
]

urlpatterns += router.urls


from rest_framework.views import APIView
from rest_framework.response import Response
from django.urls import reverse


class APIRootView(APIView):
    def get(self, request, *args, **kwargs):
        data = {
            "auth": {
                "signin": self.request.build_absolute_uri(
                    reverse("api:auth-signin")
                ),
                "register": self.request.build_absolute_uri(
                    reverse("api:auth-register")
                ),
                "refresh_token": self.request.build_absolute_uri(
                    reverse("api:token_refresh")
                ),
                # Assuming you have an endpoint for 'auth-me'
                # "auth-me": self.request.build_absolute_uri(reverse("api:auth-me")),
            },
            "users": self.request.build_absolute_uri(reverse("api:user-list")),
            "groups": self.request.build_absolute_uri(
                reverse("api:group-list")
            ),
            "permissions": self.request.build_absolute_uri(
                reverse("api:permission-list")
            ),
            "send_email": self.request.build_absolute_uri(
                reverse("api:send-email")
            ),
            "request_reset_email": self.request.build_absolute_uri(
                reverse("api:request-reset-email")
            ),
            "password_reset_confirm": self.request.build_absolute_uri(
                reverse(
                    "api:password-reset-confirm",
                    kwargs={"uidb64": "<uidb64>", "token": "<token>"},
                )
            ),
            "password_reset_complete": self.request.build_absolute_uri(
                reverse("api:password-reset-complete")
            ),
        }
        return Response(data)


# 'logout': reverse('api:logout', request=request, format=format),
# 'password_change': reverse('api:password_change', request=request, format=format),
